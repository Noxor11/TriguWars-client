# You should only use Makefile-based build if you know what you're doing.
# For most vitasdk projects, CMake is a better choice. See CMakeLists.txt for an example.

PHONY := all package clean
rwildcard=$(foreach d,$(wildcard $1*),$(call rwildcard,$d/,$2) $(filter $(subst *,%,$2),$d))

CC := arm-vita-eabi-gcc
CXX := arm-vita-eabi-g++
STRIP := arm-vita-eabi-strip

PROJECT_TITLE := TriguWars
PROJECT_TITLEID := NOXTAU001

PROJECT := triguwars

LIBS = -lvita2d -lSceDisplay_stub -lSceGxm_stub -lSceLibKernel_stub \
	-lSceSysmodule_stub -lSceCtrl_stub -lSceTouch_stub -lScePgf_stub -lScePvf_stub -lbox2d \
	-lSceCommonDialog_stub -lfreetype -lbz2 -lpng -ljpeg -lz -lm -lc -lSceAppMgr_stub -I./include -I./include/platform/vita

CXXFLAGS += -Wall -D__PSVITA__ -O2 -std=gnu++20

SRC_C :=$(call rwildcard, src/, *.c)
SRC_CPP :=$(call rwildcard, src/, *.cpp)
FILTER_OUT = $(foreach v,$(2),$(if $(findstring $(1),$(v)),,$(v)))
SRC_CPP := $(call FILTER_OUT,3ds, $(SRC_CPP))

SRC = $(SRC_CPP) $(SRC_C)

OBJ_CPP=$(patsubst %.cpp,build.vita/%.o,$(SRC_CPP))
OBJ=$(patsubst %.c,build.vita/%.o,$(SRC_C))

OBJS = $(OBJ_CPP) $(OBJ)

#OBJ_DIRS := $(addprefix out/, $(dir $(SRC_C:src/%.c=%.o))) $(addprefix out/, $(dir $(SRC_CPP:src/%.cpp=%.o))) $(addprefix out/, $(dir $(SRC_CPP:src/platform/vita/%.cpp=%.o)))
#OBJS := $(addprefix out/, $(SRC_C:src/%.c=%.o)) $(addprefix out/, $(SRC_CPP:src/%.cpp=%.o))
OBJ_NAME = triguwars


all: package

package: $(PROJECT).vpk

$(PROJECT).vpk: eboot.bin param.sfo
	vita-pack-vpk -s param.sfo -b eboot.bin \
		--add sce_sys/icon0.png=sce_sys/icon0.png \
		--add sce_sys/livearea/contents/bg.png=sce_sys/livearea/contents/bg.png \
		--add sce_sys/livearea/contents/startup.png=sce_sys/livearea/contents/startup.png \
		--add sce_sys/livearea/contents/template.xml=sce_sys/livearea/contents/template.xml \
		--add gfx/fonts/CubicCoreMono.ttf=gfx/fonts/CubicCoreMono.ttf \
	$(PROJECT).vpk

eboot.bin: $(PROJECT).velf
	vita-make-fself $(PROJECT).velf eboot.bin

param.sfo:
	vita-mksfoex -s TITLE_ID="$(PROJECT_TITLEID)" "$(PROJECT_TITLE)" param.sfo

$(PROJECT).velf: $(PROJECT).elf
	$(STRIP) -g $<
	vita-elf-create $< $@

#$(PROJECT).elf: $(OBJS)
#	$(CXX) $(CXXFLAGS) -Wl,-q $(OBJS) $(LIBS) -o $@

$(PROJECT).elf: $(OBJS)
# -Wl,-q is necessary because vita-elf-create says so
	$(CXX) $(CXXFLAGS) $(OBJS) -Wl,-q -o $(OBJ_NAME).elf $(LIBS)

build.vita/%.o : %.cpp #| $(OBJ_DIRS)
	mkdir -p ${dir $@}
	$(CXX) $(CXXFLAGS) $(LIBS) $(CFLAGS) $< -c -o $@

$(OBJ_DIRS): build.vita
	mkdir -p $@




#arm-vita-eabi-g++ -c $(CXXFLAGS) -o $@ $< $(LIBS)

# build/%.o : src/%.c #| $(OBJ_DIRS)
# 	arm-vita-eabi-g++ -c -o $@ $< $(LIBS)

clean:
	rm -f *.velf *.elf *.vpk *.sfo *.bin
	rm -rf build.vita
